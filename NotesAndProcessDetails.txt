This document is intend to be a snapshot of what I am doing and learning each time I make progress towards Teboarw development with its primary focus being on the Dotnet API back bone of the application.

Currently I am progreessing through some tutorial videos and msft documentation in hopes to get a better ground of the ms dev environment and the best way to get an api in place that also handles authentication

Jan 18 2024:
    Began Udemy coursework going from scaatch and creating an angular/ c# web application 

    Build an app with ASPNET Core and Angular from scratch Notes:

        Dotnet CLI Commands:
            dotnet --info
                will show which sdks and runtimes are available to use and dev against and run dlls against
                    Example output: 
                        Runtime Environment:
                        OS Name:     Mac OS X
                        OS Version:  14.2
                        OS Platform: Darwin
                        RID:         osx-arm64
                        Base Path:   /usr/local/share/dotnet/sdk/8.0.100/

                        .NET workloads installed:
                        Workload version: 8.0.100-manifests.6c33ef20
                        There are no installed workloads to display.

                        Host:
                        Version:      8.0.0
                        Architecture: arm64
                        Commit:       5535e31a71

                        .NET SDKs installed:
                        6.0.414 [/usr/local/share/dotnet/sdk]
                        6.0.416 [/usr/local/share/dotnet/sdk]
                        6.0.417 [/usr/local/share/dotnet/sdk]
                        7.0.308 [/usr/local/share/dotnet/sdk]
                        7.0.310 [/usr/local/share/dotnet/sdk]
                        7.0.311 [/usr/local/share/dotnet/sdk]
                        8.0.100 [/usr/local/share/dotnet/sdk]

                        .NET runtimes installed:
                        Microsoft.AspNetCore.App 6.0.22 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
                        Microsoft.AspNetCore.App 6.0.24 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
                        Microsoft.AspNetCore.App 6.0.25 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
                        Microsoft.AspNetCore.App 7.0.11 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
                        Microsoft.AspNetCore.App 7.0.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
                        Microsoft.AspNetCore.App 7.0.14 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
                        Microsoft.AspNetCore.App 8.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
                        Microsoft.NETCore.App 6.0.22 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
                        Microsoft.NETCore.App 6.0.24 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
                        Microsoft.NETCore.App 6.0.25 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
                        Microsoft.NETCore.App 7.0.11 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
                        Microsoft.NETCore.App 7.0.13 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
                        Microsoft.NETCore.App 7.0.14 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
                        Microsoft.NETCore.App 8.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]

            dotnet -h 

            
                output all the available commands 
                outpu:
                    Execute a .NET SDK command.
                    sdk-options:
                    -d|--diagnostics  Enable diagnostic output.
                    -h|--help         Show command line help.
                    --info            Display .NET information.
                    --list-runtimes   Display the installed runtimes.
                    --list-sdks       Display the installed SDKs.
                    --version         Display .NET SDK version in use.

                    SDK commands:
                    add               Add a package or reference to a .NET project.
                    build             Build a .NET project.
                    build-server      Interact with servers started by a build.
                    clean             Clean build outputs of a .NET project.
                    format            Apply style preferences to a project or solution.
                    help              Show command line help.
                    list              List project references of a .NET project.
                    msbuild           Run Microsoft Build Engine (MSBuild) commands.
                    new               Create a new .NET project or file.
                    nuget             Provides additional NuGet commands.
                    pack              Create a NuGet package.
                    publish           Publish a .NET project for deployment.
                    remove            Remove a package or reference from a .NET project.
                    restore           Restore dependencies specified in a .NET project.
                    run               Build and run a .NET project output.
                    sdk               Manage .NET SDK installation.
                    sln               Modify Visual Studio solution files.
                    store             Store the specified assemblies in the runtime package store.
                    test              Run unit tests using the test runner specified in a .NET project.
                    tool              Install or manage tools that extend the .NET experience.
                    vstest            Run Microsoft Test Engine (VSTest) commands.
                    workload          Manage optional workloads.

                    Additional commands from bundled tools:
                    dev-certs         Create and manage development certificates.
                    fsi               Start F# Interactive / execute F# scripts.
                    user-jwts         Manage JSON Web Tokens in development.
                    user-secrets      Manage development user secrets.
                    watch             Start a file watcher that runs a command when files change.

            dotnet new -h 
                lists what you can do with the new command 
                output:
                    Usage:
                    dotnet new [<template-short-name> [<template-args>...]] [options]
                    dotnet new [command] [options]

                    Arguments:
                    <template-short-name>  A short name of the template to create.
                    <template-args>        Template specific options to use.

                    Options:
                    -o, --output <output>    Location to place the generated output.
                    -n, --name <name>        The name for the output being created. If no name is specified, the name of the output directory is used.
                    --dry-run                Displays a summary of what would happen if the given command line were run if it would result in a template creation.
                    --force                  Forces content to be generated even if it would change existing files.
                    --no-update-check        Disables checking for the template package updates when instantiating a template.
                    --project <project>      The project that should be used for context evaluation.
                    -v, --verbosity <LEVEL>  Sets the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], and diag[nostic]. [default: normal]
                    -d, --diagnostics        Enables diagnostic output.
                    -?, -h, --help           Show command line help.

                    Commands:
                    create <template-short-name> <template-args>  Instantiates a template with given short name. An alias of 'dotnet new <template name>'.
                    install <package>                             Installs a template package.
                    uninstall <package>                           Uninstalls a template package.
                    update                                        Checks the currently installed template packages for update, and install the updates.
                    search <template-name>                        Searches for the templates on NuGet.org.
                    list <template-name>                          Lists templates containing the specified template name. If no name is specified, lists all templates.
                    details <package-identifier>                  Provides the details for specified template package.
                                                                        The command checks if the package is installed locally, if it was not found, it searches the configured NuGet feeds.

            dotnet new list
                lists all the templates available to create projects 
                output:
                    Template Name                                 Short Name                  Language    Tags                            
                    --------------------------------------------  --------------------------  ----------  --------------------------------
                    API Controller                                apicontroller               [C#]        Web/ASP.NET                     
                    ASP.NET Core Empty                            web                         [C#],F#     Web/Empty                       
                    ASP.NET Core gRPC Service                     grpc                        [C#]        Web/gRPC/API/Service            
                    ASP.NET Core Web API                          webapi                      [C#],F#     Web/WebAPI/Web API/API/Service  
                    ASP.NET Core Web API (native AOT)             webapiaot                   [C#]        Web/Web API/API/Service         
                    ASP.NET Core Web App (Model-View-Controller)  mvc                         [C#],F#     Web/MVC                         
                    ASP.NET Core Web App (Razor Pages)            webapp,razor                [C#]        Web/MVC/Razor Pages             
                    ASP.NET Core with Angular                     angular                     [C#]        Web/MVC/SPA                     
                    ASP.NET Core with React.js                    react                       [C#]        Web/MVC/SPA                     
                    Blazor Server App                             blazorserver                [C#]        Web/Blazor                      
                    Blazor Server App Empty                       blazorserver-empty          [C#]        Web/Blazor/Empty                
                    Blazor Web App                                blazor                      [C#]        Web/Blazor/WebAssembly          
                    Blazor WebAssembly App Empty                  blazorwasm-empty            [C#]        Web/Blazor/WebAssembly/PWA/Empty
                    Blazor WebAssembly Standalone App             blazorwasm                  [C#]        Web/Blazor/WebAssembly/PWA      
                    Class Library                                 classlib                    [C#],F#,VB  Common/Library                  
                    Console App                                   console                     [C#],F#,VB  Common/Console                  
                    dotnet gitignore file                         gitignore,.gitignore                    Config                          
                    Dotnet local tool manifest file               tool-manifest                           Config                          
                    EditorConfig file                             editorconfig,.editorconfig              Config                          
                    global.json file                              globaljson,global.json                  Config                          
                    MSBuild Directory.Build.props file            buildprops                              MSBuild/props                   
                    MSBuild Directory.Build.targets file          buildtargets                            MSBuild/props                   
                    MSTest Playwright Test Project                mstest-playwright           [C#]        Test/MSTest/Playwright          
                    MSTest Test Project                           mstest                      [C#],F#,VB  Test/MSTest                     
                    MVC Controller                                mvccontroller               [C#]        Web/ASP.NET                     
                    MVC ViewImports                               viewimports                 [C#]        Web/ASP.NET                     
                    MVC ViewStart                                 viewstart                   [C#]        Web/ASP.NET                     
                    NuGet Config                                  nugetconfig,nuget.config                Config                          
                    NUnit 3 Test Item                             nunit-test                  [C#],F#,VB  Test/NUnit                      
                    NUnit 3 Test Project                          nunit                       [C#],F#,VB  Test/NUnit                      
                    NUnit Playwright Test Project                 nunit-playwright            [C#]        Test/NUnit/Playwright           
                    Protocol Buffer File                          proto                                   Web/gRPC                        
                    Razor Class Library                           razorclasslib               [C#]        Web/Razor/Library               
                    Razor Component                               razorcomponent              [C#]        Web/ASP.NET                     
                    Razor Page                                    page                        [C#]        Web/ASP.NET                     
                    Razor View                                    view                        [C#]        Web/ASP.NET                     
                    Solution File                                 sln,solution                            Solution                        
                    Web Config                                    webconfig                               Config                          
                    Worker Service                                worker                      [C#],F#     Common/Worker/Web               
                    xUnit Test Project                            xunit                       [C#],F#,VB  Test/xUnit   

            dotnet new sln
                created a new sln file with the director name if none specified

            dotnet new webapi -n TeborawAPI
                creates a new api project in the solution directory and pull in the default templated files courtesy of msfy 

            dotnet sln -h 
                list all commands available to use on the soution 

            dotnet sln add TeborawAPI 
                Adds the Templated Project to the solutions file 

            code .
                if no command found open vs code cmd shift + p and type shell in the search box and select the option to instal the code shell utility 
                will open the containing folder in vscode 

            code color highlight were not working:
                THe code them dark was at fault 
                cmd shift + p and changed them to dark + isntead voila 

            dotnet run:
                from the api proj directory if you run this command it will compile and run the template projcect
                output:
                    Building...
                    info: Microsoft.Hosting.Lifetime[14]
                        Now listening on: http://localhost:5224
                    info: Microsoft.Hosting.Lifetime[0]
                        Application started. Press Ctrl+C to shut down.
                    info: Microsoft.Hosting.Lifetime[0]
                        Hosting environment: Development
                    info: Microsoft.Hosting.Lifetime[0]
                        Content root path: /Users/rompasaurus/TeborawWebApp/TeborawAPI

            http://localhost:5224/swagger
                takes you to the swagger endpoint which should show all available api enpoints in dev mode of course

            port and url mappings:
                Held within the launchsettigns.json
                
                adjusted http launch settings to allow https and http specifying port 5000
                  "profiles": {
                    "http": {
                    "commandName": "Project",
                    "dotnetRunMessages": true,
                    "launchBrowser": true,
                    "launchUrl": "swagger",
                    "applicationUrl": "http://localhost:5000;https://localhost:5001",
                    "environmentVariables": {
                        "ASPNETCORE_ENVIRONMENT": "Development"
                    }
                },


            dotnet watch:
                runs your .net application with hot reloading checking for file updates and auto pushing if available
                will log those events as well 

Jan 19 2024:
    Build an app with ASPNET Core and Angular from scratch Notes:
        https certificates:
            Are issue typically by default with the dotnet sdk if not trusted by browser run 
            dotnet dev-certs https --trust 
            clean than trust if not work 
            dotnet dev-certs https --clean 
            dotnet dev-certs https --trust 

        get debugs to be more verbose 
        appsettings.development.json > set Loglevel > default to onformational

        installed the entity framework and postgres entity drivers 
            had to install the nuget package manager and library 

        Double check the namespace when you make a new class or file ensure the namespace follows:
            projectname.folder 

        cmd + p > quickest way to open a file in vscode 

        created dbContext with the AppUser to start and DI'd via the program.cs

        builder.Services.AddDbContext<DataContext>(opts =>
        {
            opts.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"));
        });
        create DefaultConnection in appsettings.json 
              "ConnectionStrings": {
                    //Postgres docker db  
                    "DefaultConnection": "Server=localhost; Port=5432; Database=Teboraw; Username=Teboraw; Password =Bigmac12!;TrustServerCertificate=true"
                }
        Going to need to obfuscate these creds eventually 

        Create first migration -> dotnet ef cli tools need to be installed first 
            command:
                dotnet tool install --global dotnet-ef

                dotnet ef -h
                    help options for ef and commands available 

                dotnet ef migrations add InitialCreate -o Data/Migrations
                    creates the first migration pack and scripts 

                dotnet tool -list
                    shows all dn tools available including ef cli 

                dotnet ef database update 
                    applies all migrations existing and unapplied
                    applies the table and you should be able to view newly create column and db via connecor (datagrip)

                Creeated a users controller:
                    namespace TeborawAPI.Controllers;
                        [ApiController]
                        [Route("api/[controller]")] // /api/users
                        public class UsersController : ControllerBase
                        {
                            private readonly DataContext context;

                            public UsersController(DataContext context)
                            {
                                this.context = context;
                            }
                        }
            
        Routing error The routes dont get mapped without this ffs:
            added this to the startup.cs and all is well 
            app.MapControllerRoute(
                name: "default",
                pattern: "{controller}/{action=Index}/{id?}");

        Asynchronous api operations:
            public async Task 
            ex:     public async Task<ActionResult<AppUser>> GetUser(int id)
            allows the api server to pass this query to a delegate and handle other requests while sql retrieves
            make sure to await the return call to allow the function to be delegated 
                examle var users = await _context.Users.ToListAsync();

Jan 20 2024:
    Build an app with ASPNET Core and Angular from scratch Notes:
        Starting with angulare install the node cli along with angular cli gonna go with angular 17 instead of 16 

        npm install -g @angular/cli

        ng version:
            will show you the install angualr version number along with node version as well
        
        Create angular application 
        ng new client 
            css styling select and 
            enable Server-Side Rendering (SSR) to allow for better web anayitics and google search availability
            this didnt have all the features i needed including routing and app module template had to use 
            ng new client --no-standalone --routing --ssr=true

        running angular template app 
            cd into template folder 
            command: 
                ng serve

            index.html is the starting page for the angular > which then cascades and loads the <app-root></app-root> which a component named app.compoennt.html/ts

        ctr + p allow quick open of a file 

        wire up angular to hit controller endpoint
            import the httpclienmodule in app.module 
              imports: [
                    BrowserModule,
                    AppRoutingModule,
                    HttpClientModule
                ],
        Slap that httpmodule into a component 
            via DI in the conststructor 
                constructor(private http: HttpClient){}
            extend componet class from OnInit to add a lifecycle step
            implement oninit method and try out a quick http get pull 
                this.http.get('https://localhost:5001/api/users').subscribe({
                    next: response => this.users = response,
                    error: error => console.log("Failed to pull user data error: ", error),
                    complete: () => console.log('User Request Completed! ')
                })
            make sure api is running > dotnet watch 
            gonna invariably get a cors cross site rejection error need to setup dotnet to allow specified origins to pull from api

        Addressing cors errors 
            is done on the api side add a header to the response that allow angular to trust data 
            program.cs 
                add the cors service 
                Code:
                    builder.Services.AddCors();
                
                create the middleware to inject the cors headers prior to sending back a response 
                add code just before the mapCOntroller call
                Code:
                    app.UseCors(cPolicyBuilder => cPolicyBuilder.AllowAnyHeader().AllowAnyMethod().WithOrigins("http://localhost:4200"));

                request completes succ you can check the data passed back via 
                debug > network tab > click users form name list > preview tab to view data 
                [
                    {
                        "id": 2,
                        "userName": "Bob"
                    },
                    {
                        "id": 3,
                        "userName": "Tom"
                    },
                    {
                        "id": 4,
                        "userName": "Jane"
                    }
                ]

                quick angular tip just type the html tag name without the <> and you can add a class by adding .class name and then tab to auto create the html element 
                ie:
                    ul.ulClass name > turns into <ul class="ulClassNmae"></ul>

                add users to page and iterate over all users 
                    <li class="bold" *ngFor="let user of users">
                        {{user.id}} - {{user.userName}}
                    </li>
                    *ngFor is the key thing to not allows you iterate of a list of objects
                    FYI > .net api calls return json data with camelcasing by default 
                        userName insteaed of username 
                
        Add Bootstrap Styling 
            that has angular implementations
            ngx-bootstrap
            https://valor-software.com/ngx-bootstrap/#/
            cli command: 
                    ng add ngx-bootstrap
                received erro auto way went manual way instead 
                    npm install ngx-bootstrap --save
                imported the module manually
                added bootstrap.css 
                angular.json:
                    "styles": [
                        "src/styles.css",
                        "./node_modules/font-awesome/css/font-awesome.css",
                        "./node_modules/bootstrap/dist/css/bootstrap.min.css"
                        ],
                update app.module with:
                imported module via app.module 
                    mport { TooltipModule } from 'ngx-bootstrap/tooltip';
                    imports: [ TooltipModule.forRoot(), BrowserAnimationsModule]

                package.json should have entry for 
                    "ngx-bootstrap": "^12.0.0",
            install fontawesome 
                npm install fontawesome


        Error Port 4200 is already in use.:
            sudo kill -9 $(sudo lsof -t -i:4200) 
            to kill rogue angular app


Jan 20 2024:
    Build an app with ASPNET Core and Angular from scratch Notes:
        Add ssl and certs to angular application:

    install mkcert:
        https://github.com/FiloSottile/mkcert
        brew install mkcert
        brew install nss # if you use Firefox   

    make ssl directory in the client folder
        mkdir ssl

    install the cert authority from the ssl directory 
        mkcert -install 

    Create the certificate for localhost for now domain later 
        mkcert localhost

        creates both a publich and private key for specified domain (localhost)

    Wire in cert to angular.json
        inside of "server":
        "serve": {
            "options": {
                "ssl": true,
                "sslCert": "./ssl/localhost.pem"
                "sslKey": "./ssl/localhost-key.pem"
            },
        restart angular app and site should auto redirect to https with a trusted cert 
        be aware this is a self signed certificate 

    fix cors to allow  
        ssl error:
            Access to XMLHttpRequest at 'https://localhost:5001/api/users' from origin 'https://localhost:4200' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
       
        with the cert you will need to update the api to allow ssl connections 

        change: 
        app.UseCors(cPolicyBuilder => cPolicyBuilder.AllowAnyHeader().AllowAnyMethod().WithOrigins("http://localhost:4200"));
        to ->
        app.UseCors(cPolicyBuilder => cPolicyBuilder.AllowAnyHeader().AllowAnyMethod().WithOrigins("https://localhost:4200"));